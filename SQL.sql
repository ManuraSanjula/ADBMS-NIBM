-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

-- 1. Drop Views
BEGIN
    FOR v IN (SELECT view_name FROM user_views) LOOP
        EXECUTE IMMEDIATE 'DROP VIEW "' || v.view_name || '" CASCADE CONSTRAINTS';
    END LOOP;
END;
/


-- 2. Drop Procedures
BEGIN
    FOR p IN (SELECT object_name FROM user_procedures WHERE object_type = 'PROCEDURE') LOOP
        EXECUTE IMMEDIATE 'DROP PROCEDURE "' || p.object_name || '"';
    END LOOP;
END;
/

-- 3. Drop Tables
DROP TABLE CartItem CASCADE CONSTRAINTS;
DROP TABLE Cart CASCADE CONSTRAINTS;
DROP TABLE Review CASCADE CONSTRAINTS;
DROP TABLE Shipping CASCADE CONSTRAINTS;
DROP TABLE Payment CASCADE CONSTRAINTS;
DROP TABLE OrderItem CASCADE CONSTRAINTS;
DROP TABLE Orders CASCADE CONSTRAINTS;
DROP TABLE Address CASCADE CONSTRAINTS;
DROP TABLE Customer CASCADE CONSTRAINTS;
DROP TABLE Product CASCADE CONSTRAINTS;
DROP TABLE Supplier CASCADE CONSTRAINTS;
DROP TABLE Category CASCADE CONSTRAINTS;
DROP TABLE Driver CASCADE CONSTRAINTS;
DROP TABLE Manager CASCADE CONSTRAINTS;
DROP TABLE Admin CASCADE CONSTRAINTS;
DROP TABLE Users CASCADE CONSTRAINTS;


-- ##############################################################################################


CREATE TABLE Users (
    UserID NUMBER PRIMARY KEY,
    UserName VARCHAR2(100) UNIQUE NOT NULL,
    Password VARCHAR2(100) NOT NULL,
    NIC VARCHAR2(20) UNIQUE,
    Type VARCHAR2(20) CHECK (Type IN ('Admin', 'Manager', 'Driver', 'Customer','Supplier'))
);

CREATE TABLE Admin (
    AdminID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(100),
    LastName VARCHAR2(100),
    UserID NUMBER UNIQUE,
    Email VARCHAR2(100) CHECK (Email LIKE '%@%.%'),
    Phone VARCHAR2(20),
    CONSTRAINT fk_admin_user FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

CREATE TABLE Manager (
    ManagerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(100),
    LastName VARCHAR2(100),
    UserID NUMBER UNIQUE,
    Email VARCHAR2(100) CHECK (Email LIKE '%@%.%'),
    Phone VARCHAR2(20),
    CONSTRAINT fk_manager_user FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

CREATE TABLE Driver (
    DriverID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(100),
    LastName VARCHAR2(100),
    UserID NUMBER UNIQUE,
    LicenseNumber VARCHAR2(50),
    Email VARCHAR2(100) CHECK (Email LIKE '%@%.%'),
    Phone VARCHAR2(20),
    CONSTRAINT fk_driver_user FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

CREATE TABLE Customer (
    CustomerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(50) NOT NULL,
    LastName VARCHAR2(50) NOT NULL,
    Email VARCHAR2(100) UNIQUE NOT NULL,
    Phone VARCHAR2(20),
    Address VARCHAR2(200),
    City VARCHAR2(100),
    State VARCHAR2(100),
    ZipCode VARCHAR2(10),
    RegistrationDate DATE DEFAULT SYSDATE,
    UserID NUMBER UNIQUE,
    ShippingAddressID NUMBER UNIQUE,  
    BillingAddressID NUMBER UNIQUE, 
    CONSTRAINT fk_customer_user FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

CREATE TABLE Supplier (
    SupplierID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    SupplierName VARCHAR2(100) NOT NULL,
    ContactName VARCHAR2(100),
    Email VARCHAR2(100) CHECK (Email LIKE '%@%.%'),
    Phone VARCHAR2(20),
    Address VARCHAR2(200),
    City VARCHAR2(100),
    State VARCHAR2(100),
    ZipCode VARCHAR2(10),
    UserID NUMBER UNIQUE,
    CONSTRAINT fk_supplier_user FOREIGN KEY (UserID) REFERENCES Users(UserID)
);


CREATE TABLE Category (
    CategoryID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CategoryName VARCHAR2(100) NOT NULL,
    Description VARCHAR2(500)
);


CREATE TABLE Product (
    ProductID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ProductName VARCHAR2(100) NOT NULL,
    CategoryID NUMBER NOT NULL,
    SupplierID NUMBER NOT NULL,
    Price NUMBER(10,2) NOT NULL CHECK (Price > 0),
    StockQuantity NUMBER NOT NULL CHECK (StockQuantity >= 0),
    Description VARCHAR2(1000),
    CONSTRAINT fk_product_category
        FOREIGN KEY (CategoryID) REFERENCES Category(CategoryID),
    CONSTRAINT fk_product_supplier
        FOREIGN KEY (SupplierID) REFERENCES Supplier(SupplierID)
);


--CREATE TABLE Customer (
--    CustomerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--    FirstName VARCHAR2(50) NOT NULL,
--    LastName VARCHAR2(50) NOT NULL,
--    Email VARCHAR2(100) UNIQUE NOT NULL,
--    Phone VARCHAR2(20),
--    Address VARCHAR2(200),
--    City VARCHAR2(100),
--    State VARCHAR2(100),
--    ZipCode VARCHAR2(10),
--    RegistrationDate DATE DEFAULT SYSDATE,
--    UserID NUMBER UNIQUE,
--    ShippingAddressID NUMBER UNIQUE,
--    BillingAddressID NUMBER UNIQUE,
--    CONSTRAINT fk_customer_user FOREIGN KEY (UserID) REFERENCES Users(UserID),
--    CONSTRAINT fk_customer_shipping_address FOREIGN KEY (ShippingAddressID) REFERENCES Address(AddressID),
--    CONSTRAINT fk_customer_billing_address FOREIGN KEY (BillingAddressID) REFERENCES Address(AddressID)
--);



CREATE TABLE Address (
    AddressID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID NUMBER NOT NULL,
    Street VARCHAR2(200) NOT NULL,
    City VARCHAR2(100) NOT NULL,
    State VARCHAR2(100) NOT NULL,
    ZipCode VARCHAR2(10) NOT NULL,
    AddressType VARCHAR2(50) CHECK (AddressType IN ('Home', 'Work', 'Other')),
    CONSTRAINT fk_address_customer FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID)
);

ALTER TABLE Customer
    ADD (
        CONSTRAINT fk_customer_shipping_address
            FOREIGN KEY (ShippingAddressID)
            REFERENCES Address(AddressID),
        
        CONSTRAINT fk_customer_billing_address
            FOREIGN KEY (BillingAddressID)
            REFERENCES Address(AddressID)
    );


CREATE TABLE Orders (
    OrderID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID NUMBER NOT NULL,
    OrderDate DATE DEFAULT SYSDATE,
    ShipDate DATE,
    ShippingAddress VARCHAR2(200),
    TotalAmount NUMBER(10,2) CHECK (TotalAmount >= 0),
    Status VARCHAR2(50) NOT NULL CHECK (Status IN ('Pending', 'Shipped', 'Delivered', 'Cancelled')),
    CONSTRAINT fk_orders_customer FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID)
);

CREATE TABLE OrderItem (
    OrderItemID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    OrderID NUMBER NOT NULL,
    ProductID NUMBER NOT NULL,
    Quantity NUMBER NOT NULL CHECK (Quantity > 0),
    UnitPrice NUMBER(10,2) NOT NULL CHECK (UnitPrice > 0),
    TotalPrice NUMBER GENERATED ALWAYS AS (Quantity * UnitPrice) VIRTUAL,
    CONSTRAINT fk_orderitem_order FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    CONSTRAINT fk_orderitem_product FOREIGN KEY (ProductID) REFERENCES Product(ProductID)
);

CREATE TABLE Payment (
    PaymentID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    OrderID NUMBER NOT NULL,
    PaymentDate DATE DEFAULT SYSDATE,
    PaymentMethod VARCHAR2(50) NOT NULL CHECK (PaymentMethod IN ('Credit Card', 'Debit Card', 'PayPal', 'Bank Transfer')),
    Amount NUMBER(10,2) NOT NULL CHECK (Amount >= 0),
    CONSTRAINT fk_payment_order FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

CREATE TABLE Shipping (
    ShippingID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    OrderID NUMBER NOT NULL,
    Carrier VARCHAR2(100),
    TrackingNumber VARCHAR2(50),
    ShippedDate DATE,
    DeliveredDate DATE,
    ShippingCost NUMBER(10, 2),
    CONSTRAINT fk_shipping_order FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

CREATE TABLE Review (
    ReviewID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ProductID NUMBER NOT NULL,
    CustomerID NUMBER NOT NULL,
    Rating NUMBER CHECK (Rating BETWEEN 1 AND 5),
    ReviewText VARCHAR2(1000),
    ReviewDate DATE DEFAULT SYSDATE,
    CONSTRAINT fk_review_product FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
    CONSTRAINT fk_review_customer FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID)
);

CREATE TABLE Cart (
    CartID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID NUMBER NOT NULL,
    CONSTRAINT fk_cart_customer FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID)
);

CREATE TABLE CartItem (
    CartItemID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CartID NUMBER NOT NULL,
    ProductID NUMBER NOT NULL,
    Quantity NUMBER NOT NULL,
    CONSTRAINT fk_cartitem_cart FOREIGN KEY (CartID) REFERENCES Cart(CartID),
    CONSTRAINT fk_cartitem_product FOREIGN KEY (ProductID) REFERENCES Product(ProductID)
);


----- ***************************************************************************************************************************************************************

CREATE OR REPLACE TRIGGER trg_hash_password
BEFORE INSERT OR UPDATE OF Password ON Users
FOR EACH ROW
DECLARE
    v_salt VARCHAR2(32);
    v_hashed_password RAW(256);
BEGIN
    -- Generate a random salt for the password
    v_salt := DBMS_RANDOM.STRING('x', 8);  -- 8-character random string

    -- Hash the password with the salt using SHA-256
    v_hashed_password := DBMS_CRYPTO.HASH(UTL_RAW.CAST_TO_RAW(:NEW.Password || v_salt), DBMS_CRYPTO.HASH_SH256);

    -- Store the hashed password and the salt
    :NEW.Password := UTL_RAW.CAST_TO_VARCHAR2(v_hashed_password);
    :NEW.Password := v_salt || :NEW.Password;  -- Store salt+hashed password
END;
/

CREATE OR REPLACE PROCEDURE verify_user_login(
    p_email IN VARCHAR2,
    p_password IN VARCHAR2,
    p_user_details OUT SYS_REFCURSOR
) AS
    v_stored_password VARCHAR2(256);
    v_salt VARCHAR2(32);
    v_hashed_input_password RAW(256);
BEGIN
    -- Retrieve the stored password (salt+hashed_password) from the database
    SELECT Password
    INTO v_stored_password
    FROM Users
    WHERE Email = p_email;

    -- Extract the salt from the stored password
    v_salt := SUBSTR(v_stored_password, 1, 8);  -- Assuming the salt is the first 8 characters

    -- Hash the input password with the extracted salt
    v_hashed_input_password := DBMS_CRYPTO.HASH(UTL_RAW.CAST_TO_RAW(p_password || v_salt), DBMS_CRYPTO.HASH_SH256);

    -- Compare the hashed input password with the stored hashed password
    IF v_stored_password = v_salt || UTL_RAW.CAST_TO_VARCHAR2(v_hashed_input_password) THEN
        -- If passwords match, return user details
        OPEN p_user_details FOR
        SELECT UserID, FirstName, LastName, Email, Type
        FROM Users
        WHERE Email = p_email;
    ELSE
        -- If passwords do not match, raise an exception
        RAISE_APPLICATION_ERROR(-20001, 'Invalid email or password');
    END IF;
END;
/


-- 666666666666666
DECLARE
    user_details SYS_REFCURSOR;
BEGIN
    verify_user_login('john.doe@example.com', 'plaintextpassword', user_details);
    -- Fetch and display user details from the cursor if needed
END;



--- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


-- BEGIN
--     EXECUTE IMMEDIATE 'CREATE SEQUENCE Users_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE';
-- EXCEPTION
--     WHEN OTHERS THEN
--         IF SQLCODE = -955 THEN
--             NULL; -- Sequence already exists
--         ELSE
--             RAISE;
--         END IF;
-- END;
-- /

-- BEGIN
--     EXECUTE IMMEDIATE 'CREATE SEQUENCE Address_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE';
-- EXCEPTION
--     WHEN OTHERS THEN
--         IF SQLCODE = -955 THEN
--             NULL; -- Sequence already exists
--         ELSE
--             RAISE;
--         END IF;
-- END;
-- /

-- BEGIN
--     EXECUTE IMMEDIATE 'CREATE SEQUENCE Customer_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE';
-- EXCEPTION
--     WHEN OTHERS THEN
--         IF SQLCODE = -955 THEN
--             NULL; -- Sequence already exists
--         ELSE
--             RAISE;
--         END IF;
-- END;
-- /


-- BEGIN
--     EXECUTE IMMEDIATE 'ALTER TABLE Address ADD (Address VARCHAR2(255))';
-- EXCEPTION
--     WHEN OTHERS THEN
--         IF SQLCODE = -01430 THEN
--             NULL; -- Column already exists
--         ELSE
--             RAISE;
--         END IF;
-- END;
-- /

-- -- eeeeeeeeeeeeeee

-- CREATE OR REPLACE PROCEDURE add_customer(
--     p_username           IN VARCHAR2,
--     p_password           IN VARCHAR2,
--     p_nic                IN VARCHAR2,
--     p_first_name         IN VARCHAR2,
--     p_last_name          IN VARCHAR2,
--     p_email              IN VARCHAR2,
--     p_phone              IN VARCHAR2,
--     p_shipping_address   IN VARCHAR2,
--     p_shipping_city      IN VARCHAR2,
--     p_shipping_state     IN VARCHAR2,
--     p_shipping_zip       IN VARCHAR2,
--     p_billing_address    IN VARCHAR2,
--     p_billing_city       IN VARCHAR2,
--     p_billing_state      IN VARCHAR2,
--     p_billing_zip        IN VARCHAR2
-- ) AS
--     v_user_id             NUMBER;
--     v_customer_id         NUMBER;
--     v_shipping_address_id NUMBER;
--     v_billing_address_id  NUMBER;
-- BEGIN
--     INSERT INTO Users (UserID, UserName, Password, NIC, Type)
--     VALUES (Users_seq.NEXTVAL, p_username, p_password, p_nic, 'Customer')
--     RETURNING UserID INTO v_user_id;

--     INSERT INTO Address (AddressID, Address, City, State, ZipCode)
--     VALUES (Address_seq.NEXTVAL, p_shipping_address, p_shipping_city, p_shipping_state, p_shipping_zip)
--     RETURNING AddressID INTO v_shipping_address_id;

--     INSERT INTO Address (AddressID, Address, City, State, ZipCode)
--     VALUES (Address_seq.NEXTVAL, p_billing_address, p_billing_city, p_billing_state, p_billing_zip)
--     RETURNING AddressID INTO v_billing_address_id;

--     INSERT INTO Customer (
--         CustomerID, FirstName, LastName, Email, Phone, 
--         ShippingAddressID, BillingAddressID, RegistrationDate, UserID
--     )
--     VALUES (
--         Customer_seq.NEXTVAL, 
--         p_first_name, 
--         p_last_name, 
--         p_email, 
--         p_phone, 
--         v_shipping_address_id, 
--         v_billing_address_id, 
--         SYSDATE,
--         v_user_id
--     )
--     RETURNING CustomerID INTO v_customer_id;

--     COMMIT;
-- EXCEPTION
--     WHEN OTHERS THEN
--         ROLLBACK;
--         RAISE;
-- END;
-- /
-- ddddddddddddddddddddddd

CREATE SEQUENCE Supplier_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

CREATE OR REPLACE PROCEDURE add_supplier(
    p_supplier_name    IN VARCHAR2,
    p_contact_name     IN VARCHAR2,
    p_email    IN VARCHAR2,
    p_phone            IN VARCHAR2,
    p_address          IN VARCHAR2,
    p_city             IN VARCHAR2,
    p_state            IN VARCHAR2,
    p_zip_code         IN VARCHAR2,
    p_username         IN VARCHAR2 DEFAULT NULL,
    p_nic                IN VARCHAR2,
    p_user_password    IN VARCHAR2 DEFAULT NULL
) AS
    v_user_id NUMBER;
BEGIN
    -- Check if User info is provided, if so, create a new user
    IF p_username IS NOT NULL AND p_user_password IS NOT NULL THEN
        -- Insert into Users table
        INSERT INTO Users (UserID, UserName, Password, NIC, Type)
        VALUES (
            Users_seq.NEXTVAL, 
            p_username,         
            p_user_password, 
            p_nic,
            'Supplier'          
        )
        RETURNING UserID INTO v_user_id;
    ELSE
        -- Set v_user_id to NULL if no user is provided
        v_user_id := NULL;
    END IF;

    -- Insert into Supplier table
    INSERT INTO Supplier (
        SupplierID,
        SupplierName,
        ContactName,
        Email,
        Phone,
        Address,
        City,
        State,
        ZipCode,
        UserID
    ) VALUES (
        Supplier_seq.NEXTVAL,
        p_supplier_name,
        p_contact_name,
        p_email,
        p_phone,
        p_address,
        p_city,
        p_state,
        p_zip_code,
        v_user_id
    );

    -- Commit the transaction
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/



CREATE OR REPLACE PROCEDURE add_admin(
    p_first_name IN VARCHAR2,
    p_last_name IN VARCHAR2,
    p_email IN VARCHAR2,
    p_username IN VARCHAR2,
    p_password IN VARCHAR2,
    p_nic IN VARCHAR2, 
    p_phone IN VARCHAR2
) AS
    v_user_id NUMBER;
BEGIN
    -- Insert into Users table
    INSERT INTO Users (UserID, UserName, Password, NIC, Type)
    VALUES (Users_seq.NEXTVAL, p_username, p_password, p_nic, 'Admin')
    RETURNING UserID INTO v_user_id;

    -- Insert into Admin table
    INSERT INTO Admin (FirstName, LastName, UserID, Email,Phone)
    VALUES (p_first_name, p_last_name, v_user_id, p_email, p_phone);

    COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE add_driver(
    p_first_name      IN VARCHAR2,
    p_last_name       IN VARCHAR2,
    p_username        IN VARCHAR2,
    p_email           IN VARCHAR2,
    p_password        IN VARCHAR2,
    p_nic             IN VARCHAR2,
    p_license_number  IN VARCHAR2,
    p_phone           IN VARCHAR2
) AS
    v_user_id NUMBER;
BEGIN
    INSERT INTO Users (UserID, UserName, Password, NIC, Type)
    VALUES (Users_seq.NEXTVAL, p_username, p_password, p_nic, 'Driver')
    RETURNING UserID INTO v_user_id;

    INSERT INTO Driver (FirstName, LastName, UserID, LicenseNumber, Email, Phone)
    VALUES (p_first_name, p_last_name, v_user_id, p_license_number, p_email, p_phone);

    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE add_manager(
    p_first_name IN VARCHAR2,
    p_last_name  IN VARCHAR2,
    p_email      IN VARCHAR2,
    p_username   IN VARCHAR2,
    p_password   IN VARCHAR2,
    p_nic        IN VARCHAR2,  -- Removed the trailing comma here
    p_phone      IN VARCHAR2
) AS
    v_user_id NUMBER;
BEGIN
    -- Insert into Users table
    INSERT INTO Users (UserID, UserName, Password, NIC, Type)
    VALUES (Users_seq.NEXTVAL, p_username, p_password, p_nic, 'Manager')
    RETURNING UserID INTO v_user_id;

    -- Insert into Manager table (corrected column order)
    INSERT INTO Manager (FirstName, LastName, UserID, Email, Phone) 
    VALUES (p_first_name, p_last_name, v_user_id, p_email, p_phone);

    COMMIT;
END;
/


-- 0000000000000000000000

-- BEGIN
--     add_customer(
--         p_username => 'manura2003',
--         p_password => '123456',
--         p_nic => '200321312330',
--         p_first_name => 'Manura',
--         p_last_name => 'Sanjula',
--         p_email => 'manurasanjula2003@example.com',
--         p_phone => '123-456-7890',
--         p_shipping_address => '396-A School Road',
--         p_shipping_city => 'Panadura',
--         p_shipping_state => 'KL',
--         p_shipping_zip => '1200',
--         p_billing_address => '396-A School Road',
--         p_billing_city => 'Panadura',
--         p_billing_state => 'KL',
--         p_billing_zip => '1200'
--     );
-- END;
-- /


BEGIN
    add_supplier(
        p_supplier_name    => 'ABC Supplies',
        p_contact_name     => 'John Doe',
        p_email    => 'john.doe@abcsupplies.com',
        p_phone            => '123-456-7890',
        p_address          => '456 Supply Lane',
        p_city             => 'Los Angeles',
        p_state            => 'CA',
        p_zip_code         => '90001',
        p_username         => 'supplieruser',
        p_nic              => '1234567890',
        p_user_password    => 'securepassword123'
        p_phone            => '086729292',
    );
END;


BEGIN
    add_admin('Hansana', 'Adhikari', 'hansana@gmail.com', 'hansana2001', 'password123', '123456789V', '72829272');
END;
/


BEGIN
    add_driver(
        p_first_name      => 'raaid',
        p_last_name       => 'Mohomad',
        p_username        => 'raaid',
        p_email           => 'raaid@gmail.com',
        p_nic             => '087624321V',
        p_license_number  => 'DR12345',
        p_password        => 'password123',
        p_phone            => '4353638',
    );
END;


BEGIN
    add_manager(
        p_first_name => 'John',
        p_last_name  => 'Doe',
        p_email      => 'john.doe@manager.com',
        p_username   => 'john_manager',
        p_password   => 'ManagerPass123',
        p_nic        => 'NIC456123789'
        p_phone      => '0718927372',
    );
END;
/


BEGIN
    add_manager('mathesha', 'Silva', 'matheesha@gmial.com', 'matheesha1234','password123', '456789123V','0718927372');
END;
/


--- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

CREATE OR REPLACE PROCEDURE Insert_Category (
    p_CategoryName IN VARCHAR2,
    p_Description  IN VARCHAR2
) AS
BEGIN
    INSERT INTO Category (CategoryName, Description)
    VALUES (p_CategoryName, p_Description);
END Insert_Category;
/


CREATE OR REPLACE PROCEDURE Update_Category (
    p_CategoryID   IN NUMBER,
    p_CategoryName IN VARCHAR2,
    p_Description  IN VARCHAR2
) AS
BEGIN
    UPDATE Category
    SET CategoryName = p_CategoryName,
        Description  = p_Description
    WHERE CategoryID = p_CategoryID;
END Update_Category;
/

CREATE OR REPLACE PROCEDURE Delete_Category (
    p_CategoryID IN NUMBER
) AS
BEGIN
    DELETE FROM Category
    WHERE CategoryID = p_CategoryID;
END Delete_Category;
/

CREATE OR REPLACE PROCEDURE Get_Category (
    p_CategoryID IN NUMBER,
    o_Category    OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN o_Category FOR
        SELECT * FROM Category
        WHERE CategoryID = p_CategoryID;
END Get_Category;
/

-----

CREATE OR REPLACE PROCEDURE Insert_Supplier (
    p_SupplierName IN VARCHAR2,
    p_ContactName  IN VARCHAR2,
    p_ContactEmail IN VARCHAR2,
    p_Phone        IN VARCHAR2,
    p_Address      IN VARCHAR2,
    p_City         IN VARCHAR2,
    p_State        IN VARCHAR2,
    p_ZipCode      IN VARCHAR2
) AS
BEGIN
    INSERT INTO Supplier (
        SupplierName, ContactName, ContactEmail, Phone,
        Address, City, State, ZipCode
    ) VALUES (
        p_SupplierName, p_ContactName, p_ContactEmail, p_Phone,
        p_Address, p_City, p_State, p_ZipCode
    );
END Insert_Supplier;
/


CREATE OR REPLACE PROCEDURE Update_Supplier (
    p_SupplierID    IN NUMBER,
    p_SupplierName  IN VARCHAR2,
    p_ContactName   IN VARCHAR2,
    p_ContactEmail  IN VARCHAR2,
    p_Phone         IN VARCHAR2,
    p_Address       IN VARCHAR2,
    p_City          IN VARCHAR2,
    p_State         IN VARCHAR2,
    p_ZipCode       IN VARCHAR2
) AS
BEGIN
    UPDATE Supplier
    SET SupplierName = p_SupplierName,
        ContactName  = p_ContactName,
        ContactEmail = p_ContactEmail,
        Phone        = p_Phone,
        Address      = p_Address,
        City         = p_City,
        State        = p_State,
        ZipCode      = p_ZipCode
    WHERE SupplierID = p_SupplierID;
END Update_Supplier;
/


CREATE OR REPLACE PROCEDURE Delete_Supplier (
    p_SupplierID IN NUMBER
) AS
BEGIN
    DELETE FROM Supplier
    WHERE SupplierID = p_SupplierID;
END Delete_Supplier;
/

CREATE OR REPLACE PROCEDURE Get_Supplier(
    p_SupplierID IN Supplier.SupplierID%TYPE,
    o_Supplier OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN o_Supplier FOR
        SELECT SupplierID, SupplierName, ContactName, ContactEmail, Phone, Address, City, State, ZipCode
        FROM Supplier
        WHERE SupplierID = p_SupplierID;
END;



-----

CREATE OR REPLACE PROCEDURE Insert_Customer (
    p_FirstName        IN VARCHAR2,
    p_LastName         IN VARCHAR2,
    p_Email            IN VARCHAR2,
    p_Phone            IN VARCHAR2,
    p_Address          IN VARCHAR2,
    p_City             IN VARCHAR2,
    p_State            IN VARCHAR2,
    p_ZipCode          IN VARCHAR2,
    p_ShippingAddressID IN NUMBER,
    p_BillingAddressID  IN NUMBER
) AS
BEGIN
    INSERT INTO Customer (
        FirstName, LastName, Email, Phone,
        Address, City, State, ZipCode,
        ShippingAddressID, BillingAddressID
    ) VALUES (
        p_FirstName, p_LastName, p_Email, p_Phone,
        p_Address, p_City, p_State, p_ZipCode,
        p_ShippingAddressID, p_BillingAddressID
    );
END Insert_Customer;
/

CREATE OR REPLACE PROCEDURE Update_Customer (
    p_CustomerID       IN NUMBER,
    p_FirstName        IN VARCHAR2,
    p_LastName         IN VARCHAR2,
    p_Email            IN VARCHAR2,
    p_Phone            IN VARCHAR2,
    p_Address          IN VARCHAR2,
    p_City             IN VARCHAR2,
    p_State            IN VARCHAR2,
    p_ZipCode          IN VARCHAR2,
    p_ShippingAddressID IN NUMBER,
    p_BillingAddressID  IN NUMBER
) AS
BEGIN
    UPDATE Customer
    SET FirstName         = p_FirstName,
        LastName          = p_LastName,
        Email             = p_Email,
        Phone             = p_Phone,
        Address           = p_Address,
        City              = p_City,
        State             = p_State,
        ZipCode           = p_ZipCode,
        ShippingAddressID = p_ShippingAddressID,
        BillingAddressID  = p_BillingAddressID
    WHERE CustomerID = p_CustomerID;
END Update_Customer;
/


CREATE OR REPLACE PROCEDURE Delete_Customer (
    p_CustomerID IN NUMBER
) AS
BEGIN
    DELETE FROM Customer
    WHERE CustomerID = p_CustomerID;
END Delete_Customer;
/

CREATE OR REPLACE PROCEDURE Get_Customer(
    p_CustomerID IN Customer.CustomerID%TYPE,
    o_Customer OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN o_Customer FOR
        SELECT 
            CustomerID, 
            FirstName, 
            LastName, 
            Email, 
            Phone, 
            Address, 
            City, 
            State, 
            ZipCode, 
            RegistrationDate, 
            ShippingAddressID, 
            BillingAddressID
        FROM Customer
        WHERE CustomerID = p_CustomerID;
END;




----------

CREATE OR REPLACE PROCEDURE Insert_Product (
    p_ProductName  IN VARCHAR2,
    p_CategoryID   IN NUMBER,
    p_SupplierID   IN NUMBER,
    p_Price        IN NUMBER,
    p_StockQuantity IN NUMBER,
    p_Description  IN VARCHAR2
) AS
BEGIN
    INSERT INTO Product (
        ProductName, CategoryID, SupplierID,
        Price, StockQuantity, Description
    ) VALUES (
        p_ProductName, p_CategoryID, p_SupplierID,
        p_Price, p_StockQuantity, p_Description
    );
END Insert_Product;
/

CREATE OR REPLACE PROCEDURE Update_Product (
    p_ProductID     IN NUMBER,
    p_ProductName   IN VARCHAR2,
    p_CategoryID    IN NUMBER,
    p_SupplierID    IN NUMBER,
    p_Price         IN NUMBER,
    p_StockQuantity IN NUMBER,
    p_Description   IN VARCHAR2
) AS
BEGIN
    UPDATE Product
    SET ProductName   = p_ProductName,
        CategoryID    = p_CategoryID,
        SupplierID    = p_SupplierID,
        Price         = p_Price,
        StockQuantity = p_StockQuantity,
        Description   = p_Description
    WHERE ProductID = p_ProductID;
END Update_Product;
/

CREATE OR REPLACE PROCEDURE Delete_Product (
    p_ProductID IN NUMBER
) AS
BEGIN
    DELETE FROM Product
    WHERE ProductID = p_ProductID;
END Delete_Product;
/

CREATE OR REPLACE PROCEDURE Get_Product(
    p_ProductID IN Product.ProductID%TYPE,
    o_Product OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN o_Product FOR
        SELECT 
            ProductID, 
            ProductName, 
            CategoryID, 
            SupplierID, 
            Price, 
            StockQuantity, 
            Description
        FROM Product
        WHERE ProductID = p_ProductID;
END;


------ 
-- ALTER TABLE ORDERS RENAME TO ORDERS;

CREATE OR REPLACE PROCEDURE Insert_Order (
    p_CustomerID      IN NUMBER,
    p_ShipDate        IN DATE,
    p_ShippingAddress IN VARCHAR2,
    p_TotalAmount     IN NUMBER,
    p_Status          IN VARCHAR2
) AS
BEGIN
    INSERT INTO ORDERS (
        CustomerID, ShipDate, ShippingAddress,
        TotalAmount, Status
    ) VALUES (
        p_CustomerID, p_ShipDate, p_ShippingAddress,
        p_TotalAmount, p_Status
    );
END Insert_Order;
/

CREATE OR REPLACE PROCEDURE Update_Order (
    p_OrderID         IN NUMBER,
    p_CustomerID      IN NUMBER,
    p_ShipDate        IN DATE,
    p_ShippingAddress IN VARCHAR2,
    p_TotalAmount     IN NUMBER,
    p_Status          IN VARCHAR2
) AS
BEGIN
    UPDATE ORDERS
    SET CustomerID      = p_CustomerID,
        ShipDate        = p_ShipDate,
        ShippingAddress = p_ShippingAddress,
        TotalAmount     = p_TotalAmount,
        Status          = p_Status
    WHERE OrderID = p_OrderID;
END Update_Order;
/

CREATE OR REPLACE PROCEDURE Delete_Order (
    p_OrderID IN NUMBER
) AS
BEGIN
    DELETE FROM ORDERS
    WHERE OrderID = p_OrderID;
END Delete_Order;
/

CREATE OR REPLACE PROCEDURE Get_Order (
    p_OrderID IN NUMBER,
    o_Order   OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN o_Order FOR
        SELECT * FROM ORDERS
        WHERE OrderID = p_OrderID;
END Get_Order;
/




----------------

CREATE OR REPLACE PROCEDURE Insert_OrderItem (
    p_OrderID  IN NUMBER,
    p_ProductID IN NUMBER,
    p_Quantity IN NUMBER,
    p_UnitPrice IN NUMBER
) AS
BEGIN
    INSERT INTO OrderItem (
        OrderID, ProductID, Quantity, UnitPrice
    ) VALUES (
        p_OrderID, p_ProductID, p_Quantity, p_UnitPrice
    );
END Insert_OrderItem;
/


CREATE OR REPLACE PROCEDURE Update_OrderItem (
    p_OrderItemID IN NUMBER,
    p_OrderID     IN NUMBER,
    p_ProductID   IN NUMBER,
    p_Quantity    IN NUMBER,
    p_UnitPrice   IN NUMBER
) AS
BEGIN
    UPDATE OrderItem
    SET OrderID   = p_OrderID,
        ProductID = p_ProductID,
        Quantity  = p_Quantity,
        UnitPrice = p_UnitPrice
    WHERE OrderItemID = p_OrderItemID;
END Update_OrderItem;
/


CREATE OR REPLACE PROCEDURE Delete_OrderItem (
    p_OrderItemID IN NUMBER
) AS
BEGIN
    DELETE FROM OrderItem
    WHERE OrderItemID = p_OrderItemID;
END Delete_OrderItem;
/

CREATE OR REPLACE PROCEDURE Get_OrderItem (
    p_OrderItemID IN NUMBER,
    o_OrderItem    OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN o_OrderItem FOR
        SELECT * FROM OrderItem
        WHERE OrderItemID = p_OrderItemID;
END Get_OrderItem;
/

-------------

CREATE OR REPLACE PROCEDURE Insert_Payment (
    p_OrderID      IN NUMBER,
    p_PaymentDate  IN DATE,
    p_PaymentMethod IN VARCHAR2,
    p_Amount        IN NUMBER
) AS
BEGIN
    INSERT INTO Payment (
        OrderID, PaymentDate, PaymentMethod, Amount
    ) VALUES (
        p_OrderID, p_PaymentDate, p_PaymentMethod, p_Amount
    );
END Insert_Payment;
/


CREATE OR REPLACE PROCEDURE Update_Payment (
    p_PaymentID     IN NUMBER,
    p_OrderID       IN NUMBER,
    p_PaymentDate   IN DATE,
    p_PaymentMethod IN VARCHAR2,
    p_Amount         IN NUMBER
) AS
BEGIN
    UPDATE Payment
    SET OrderID       = p_OrderID,
        PaymentDate   = p_PaymentDate,
        PaymentMethod = p_PaymentMethod,
        Amount        = p_Amount
    WHERE PaymentID = p_PaymentID;
END Update_Payment;
/

CREATE OR REPLACE PROCEDURE Delete_Payment (
    p_PaymentID IN NUMBER
) AS
BEGIN
    DELETE FROM Payment
    WHERE PaymentID = p_PaymentID;
END Delete_Payment;
/

CREATE OR REPLACE PROCEDURE Get_Payment (
    p_PaymentID IN NUMBER,
    o_Payment    OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN o_Payment FOR
        SELECT * FROM Payment
        WHERE PaymentID = p_PaymentID;
END Get_Payment;
/


------------

CREATE OR REPLACE PROCEDURE Insert_Address (
    p_CustomerID IN NUMBER,
    p_Street     IN VARCHAR2,
    p_City       IN VARCHAR2,
    p_State      IN VARCHAR2,
    p_ZipCode    IN VARCHAR2,
    p_AddressType IN VARCHAR2
) AS
BEGIN
    INSERT INTO Address (
        CustomerID, Street, City, State, ZipCode, AddressType
    ) VALUES (
        p_CustomerID, p_Street, p_City, p_State, p_ZipCode, p_AddressType
    );
END Insert_Address;
/

CREATE OR REPLACE PROCEDURE Update_Address (
    p_AddressID   IN NUMBER,
    p_CustomerID  IN NUMBER,
    p_Street      IN VARCHAR2,
    p_City        IN VARCHAR2,
    p_State       IN VARCHAR2,
    p_ZipCode     IN VARCHAR2,
    p_AddressType IN VARCHAR2
) AS
BEGIN
    UPDATE Address
    SET CustomerID  = p_CustomerID,
        Street      = p_Street,
        City        = p_City,
        State       = p_State,
        ZipCode     = p_ZipCode,
        AddressType = p_AddressType
    WHERE AddressID = p_AddressID;
END Update_Address;
/

CREATE OR REPLACE PROCEDURE Delete_Address (
    p_AddressID IN NUMBER
) AS
BEGIN
    DELETE FROM Address
    WHERE AddressID = p_AddressID;
END Delete_Address;
/

CREATE OR REPLACE PROCEDURE Get_Address (
    p_AddressID IN NUMBER,
    o_Address    OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN o_Address FOR
        SELECT * FROM Address
        WHERE AddressID = p_AddressID;
END Get_Address;
/

-----

CREATE OR REPLACE PROCEDURE Insert_Shipping (
    p_OrderID      IN NUMBER,
    p_Carrier      IN VARCHAR2,
    p_TrackingNumber IN VARCHAR2,
    p_ShippedDate  IN DATE,
    p_DeliveredDate IN DATE,
    p_ShippingCost  IN NUMBER
) AS
BEGIN
    INSERT INTO Shipping (
        OrderID, Carrier, TrackingNumber,
        ShippedDate, DeliveredDate, ShippingCost
    ) VALUES (
        p_OrderID, p_Carrier, p_TrackingNumber,
        p_ShippedDate, p_DeliveredDate, p_ShippingCost
    );
END Insert_Shipping;
/

CREATE OR REPLACE PROCEDURE Update_Shipping (
    p_ShippingID    IN NUMBER,
    p_OrderID       IN NUMBER,
    p_Carrier       IN VARCHAR2,
    p_TrackingNumber IN VARCHAR2,
    p_ShippedDate   IN DATE,
    p_DeliveredDate IN DATE,
    p_ShippingCost   IN NUMBER
) AS
BEGIN
    UPDATE Shipping
    SET OrderID        = p_OrderID,
        Carrier        = p_Carrier,
        TrackingNumber = p_TrackingNumber,
        ShippedDate    = p_ShippedDate,
        DeliveredDate  = p_DeliveredDate,
        ShippingCost    = p_ShippingCost
    WHERE ShippingID = p_ShippingID;
END Update_Shipping;
/

CREATE OR REPLACE PROCEDURE Delete_Shipping (
    p_ShippingID IN NUMBER
) AS
BEGIN
    DELETE FROM Shipping
    WHERE ShippingID = p_ShippingID;
END Delete_Shipping;
/


CREATE OR REPLACE PROCEDURE Get_Shipping (
    p_ShippingID IN NUMBER,
    o_Shipping    OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN o_Shipping FOR
        SELECT * FROM Shipping
        WHERE ShippingID = p_ShippingID;
END Get_Shipping;
/


--- 

CREATE OR REPLACE PROCEDURE Insert_Review (
    p_ProductID  IN NUMBER,
    p_CustomerID IN NUMBER,
    p_Rating     IN NUMBER,
    p_Comment    IN VARCHAR2
) AS
BEGIN
    INSERT INTO Review (
        ProductID, CustomerID, Rating, ReviewText
    ) VALUES (
        p_ProductID, p_CustomerID, p_Rating, p_Comment
    );
END Insert_Review;
/

CREATE OR REPLACE PROCEDURE Update_Review (
    p_ReviewID   IN Review.ReviewID%TYPE,
    p_ProductID  IN Product.ProductID%TYPE,
    p_CustomerID IN Customer.CustomerID%TYPE,
    p_Rating     IN NUMBER,
    p_Comment    IN VARCHAR2
) AS
BEGIN
    UPDATE Review
    SET ProductID  = p_ProductID,
        CustomerID = p_CustomerID,
        Rating     = p_Rating,
        ReviewText    = ReviewText
    WHERE ReviewID = p_ReviewID;
END Update_Review;
/

CREATE OR REPLACE PROCEDURE Delete_Review (
    p_ReviewID IN NUMBER
) AS
BEGIN
    DELETE FROM Review
    WHERE ReviewID = p_ReviewID;
END Delete_Review;
/

CREATE OR REPLACE PROCEDURE Get_Review (
    p_ReviewID IN NUMBER,
    o_Review    OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN o_Review FOR
        SELECT * FROM Review
        WHERE ReviewID = p_ReviewID;
END Get_Review;
/

--------------------------

CREATE OR REPLACE PROCEDURE Insert_Cart (
    p_CustomerID IN NUMBER
) AS
BEGIN
    INSERT INTO Cart (
        CustomerID
    ) VALUES (
        p_CustomerID
    );
END Insert_Cart;
/

CREATE OR REPLACE PROCEDURE Update_Cart (
    p_CartID     IN NUMBER,
    p_CustomerID IN NUMBER
) AS
BEGIN
    UPDATE Cart
    SET CustomerID = p_CustomerID
    WHERE CartID = p_CartID;
END Update_Cart;
/

CREATE OR REPLACE PROCEDURE Delete_Cart (
    p_CartID IN NUMBER
) AS
BEGIN
    DELETE FROM Cart
    WHERE CartID = p_CartID;
END Delete_Cart;
/

CREATE OR REPLACE PROCEDURE Get_Cart (
    p_CartID IN NUMBER,
    o_Cart    OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN o_Cart FOR
        SELECT * FROM Cart
        WHERE CartID = p_CartID;
END Get_Cart;
/

--------------------

CREATE OR REPLACE PROCEDURE Insert_CartItem (
    p_CartID    IN NUMBER,
    p_ProductID IN NUMBER,
    p_Quantity  IN NUMBER
) AS
BEGIN
    INSERT INTO CartItem (
        CartID, ProductID, Quantity
    ) VALUES (
        p_CartID, p_ProductID, p_Quantity
    );
END Insert_CartItem;
/


CREATE OR REPLACE PROCEDURE Update_CartItem (
    p_CartItemID IN NUMBER,
    p_CartID     IN NUMBER,
    p_ProductID  IN NUMBER,
    p_Quantity   IN NUMBER
) AS
BEGIN
    UPDATE CartItem
    SET CartID    = p_CartID,
        ProductID = p_ProductID,
        Quantity  = p_Quantity
    WHERE CartItemID = p_CartItemID;
END Update_CartItem;
/

CREATE OR REPLACE PROCEDURE Delete_CartItem (
    p_CartItemID IN NUMBER
) AS
BEGIN
    DELETE FROM CartItem
    WHERE CartItemID = p_CartItemID;
END Delete_CartItem;
/

CREATE OR REPLACE PROCEDURE Get_CartItem (
    p_CartItemID IN NUMBER,
    o_CartItem    OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN o_CartItem FOR
        SELECT * FROM CartItem
        WHERE CartItemID = p_CartItemID;
END Get_CartItem;
/


-- ===============================================================================================================================================================

SET SERVEROUTPUT ON;
SET LONG 10000;

BEGIN
    DBMS_OUTPUT.ENABLE;
END;
/


BEGIN
    Insert_Category(
        p_CategoryName => 'Electronics',
        p_Description  => 'Devices and gadgets'
    );
    DBMS_OUTPUT.PUT_LINE('Inserted Category: Electronics');
END;
/


BEGIN
    Insert_Supplier(
        p_SupplierName  => 'Tech Supplies Inc.',
        p_ContactName   => 'John Doe',
        p_ContactEmail  => 'john.doe@techsupplies.com',
        p_Phone         => '123-456-7890',
        p_Address       => '123 Tech Street',
        p_City          => 'Techville',
        p_State         => 'TechState',
        p_ZipCode       => '12345'
    );
    DBMS_OUTPUT.PUT_LINE('Inserted Supplier: Tech Supplies Inc.');
END;
/

BEGIN
    Insert_Customer(
        p_FirstName         => 'Jane',
        p_LastName          => 'Smith',
        p_Email             => 'jane.smith@example.com',
        p_Phone             => '098-765-4321',
        p_Address           => '456 Main Street',
        p_City              => 'Anytown',
        p_State             => 'Anystate',
        p_ZipCode           => '67890',
        p_ShippingAddressID => NULL, -- To be updated after inserting Address
        p_BillingAddressID  => NULL  -- To be updated after inserting Address
    );
    DBMS_OUTPUT.PUT_LINE('Inserted Customer: Jane Smith');
END;
/


-- Insert Shipping Address
-- BEGIN
--     Insert_Address(
--         p_CustomerID  => (SELECT CustomerID FROM Customer WHERE Email = 'jane.smith@example.com'),
--         p_Street      => '789 Shipping Ave',
--         p_City        => 'ShipCity',
--         p_State       => 'ShipState',
--         p_ZipCode     => '11223',
--         p_AddressType => 'Home'
--     );
--     DBMS_OUTPUT.PUT_LINE('Inserted Shipping Address for Jane Smith');
-- END;
-- /

DECLARE
    v_CustomerID Customer.CustomerID%TYPE;
BEGIN
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    Insert_Address(
        p_CustomerID  => v_CustomerID,
        p_Street      => '789 Shipping Ave',
        p_City        => 'ShipCity',
        p_State       => 'ShipState',
        p_ZipCode     => '11223',
        p_AddressType => 'Home'
    );

    -- Output a confirmation message
    DBMS_OUTPUT.PUT_LINE('Inserted Shipping Address for Jane Smith');
END;
/


-- Insert Billing Address
DECLARE
    v_CustomerID Customer.CustomerID%TYPE;
BEGIN
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    Insert_Address(
        p_CustomerID  => v_CustomerID,
        p_Street      => '321 Billing Rd',
        p_City        => 'BillCity',
        p_State       => 'BillState',
        p_ZipCode     => '44556',
        p_AddressType => 'Work'
    );

    -- Output a confirmation message
    DBMS_OUTPUT.PUT_LINE('Inserted Billing Address for Jane Smith');
END;
/

--  updating user for address
DECLARE
    v_CustomerID        Customer.CustomerID%TYPE;
    v_ShippingAddressID Address.AddressID%TYPE;
    v_BillingAddressID  Address.AddressID%TYPE;
BEGIN
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    SELECT AddressID 
    INTO v_ShippingAddressID 
    FROM Address 
    WHERE CustomerID = v_CustomerID AND AddressType = 'Home';

    SELECT AddressID 
    INTO v_BillingAddressID 
    FROM Address 
    WHERE CustomerID = v_CustomerID AND AddressType = 'Work';

    Update_Customer(
        p_CustomerID        => v_CustomerID,
        p_FirstName         => 'Jane',
        p_LastName          => 'Smith',
        p_Email             => 'jane.smith@example.com',
        p_Phone             => '098-765-4321',
        p_Address           => '456 Main Street',
        p_City              => 'Anytown',
        p_State             => 'Anystate',
        p_ZipCode           => '67890',
        p_ShippingAddressID => v_ShippingAddressID,
        p_BillingAddressID  => v_BillingAddressID
    );

    -- Output a confirmation message
    DBMS_OUTPUT.PUT_LINE('Updated Customer with Address IDs');
END;
/



DECLARE
    v_CategoryID Category.CategoryID%TYPE;
    v_SupplierID Supplier.SupplierID%TYPE;
BEGIN
    SELECT CategoryID 
    INTO v_CategoryID 
    FROM Category 
    WHERE CategoryName = 'Electronics';

    SELECT SupplierID 
    INTO v_SupplierID 
    FROM Supplier 
    WHERE SupplierName = 'Tech Supplies Inc.';

    Insert_Product(
        p_ProductName   => 'Smartphone',
        p_CategoryID    => v_CategoryID,
        p_SupplierID    => v_SupplierID,
        p_Price         => 599.99,
        p_StockQuantity => 50,
        p_Description   => 'Latest model smartphone with advanced features'
    );

    DBMS_OUTPUT.PUT_LINE('Inserted Product: Smartphone');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Category or Supplier not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple Category or Supplier records found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/


DECLARE
    v_CustomerID Customer.CustomerID%TYPE;
BEGIN
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    Insert_Order(
        p_CustomerID      => v_CustomerID,
        p_ShipDate        => SYSDATE + 5, -- Expected ship date
        p_ShippingAddress => '789 Shipping Ave, ShipCity, ShipState, 11223',
        p_TotalAmount     => 599.99,
        p_Status          => 'Pending'
    );

    DBMS_OUTPUT.PUT_LINE('Inserted Order for Jane Smith');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Customer not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple customers found with the provided email.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/


DECLARE
    v_CustomerID Customer.CustomerID%TYPE;
    v_OrderID    ORDERS.OrderID%TYPE;
    v_ProductID  Product.ProductID%TYPE;
BEGIN
    -- Retrieve CustomerID for Jane Smith
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    -- Retrieve OrderID with Status 'Pending'
    SELECT OrderID 
    INTO v_OrderID 
    FROM ORDERS 
    WHERE CustomerID = v_CustomerID AND Status = 'Pending';

    -- Retrieve ProductID for 'Smartphone'
    SELECT ProductID 
    INTO v_ProductID 
    FROM Product 
    WHERE ProductName = 'Smartphone';

    -- Call Insert_OrderItem procedure with retrieved IDs
    Insert_OrderItem(
        p_OrderID  => v_OrderID,
        p_ProductID => v_ProductID,
        p_Quantity  => 1,
        p_UnitPrice => 599.99
    );

    DBMS_OUTPUT.PUT_LINE('Inserted OrderItem for Smartphone');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Order or Product not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple Orders or Products found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/


DECLARE
    v_CustomerID Customer.CustomerID%TYPE;
    v_OrderID    ORDERS.OrderID%TYPE;
BEGIN
    -- Retrieve CustomerID for Jane Smith
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    -- Retrieve OrderID with Status 'Pending'
    SELECT OrderID 
    INTO v_OrderID 
    FROM ORDERS
    WHERE CustomerID = v_CustomerID AND Status = 'Pending';

    -- Call Insert_Payment procedure with retrieved OrderID
    Insert_Payment(
        p_OrderID       => v_OrderID,
        p_PaymentDate   => SYSDATE,
        p_PaymentMethod => 'Credit Card',
        p_Amount         => 599.99
    );

    DBMS_OUTPUT.PUT_LINE('Inserted Payment for Order');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Order not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple Orders found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/

DECLARE
    v_CustomerID Customer.CustomerID%TYPE;
    v_OrderID    ORDERS.OrderID%TYPE;
BEGIN
    -- Retrieve CustomerID for Jane Smith
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    -- Retrieve OrderID with Status 'Pending'
    SELECT OrderID 
    INTO v_OrderID 
    FROM ORDERS 
    WHERE CustomerID = v_CustomerID AND Status = 'Pending';

    -- Call Insert_Shipping procedure with retrieved OrderID
    Insert_Shipping(
        p_OrderID        => v_OrderID,
        p_Carrier        => 'FastShip',
        p_TrackingNumber => 'FS123456789',
        p_ShippedDate    => NULL, -- To be updated when shipped
        p_DeliveredDate  => NULL, -- To be updated when delivered
        p_ShippingCost   => 15.00
    );

    DBMS_OUTPUT.PUT_LINE('Inserted Shipping Details for Order');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Order not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple Orders found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/


DECLARE
    v_ProductID  Product.ProductID%TYPE;
    v_CustomerID Customer.CustomerID%TYPE;
BEGIN
    -- Retrieve ProductID for 'Smartphone'
    SELECT ProductID 
    INTO v_ProductID 
    FROM Product 
    WHERE ProductName = 'Smartphone';

    -- Retrieve CustomerID for Jane Smith
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    -- Call Insert_Review procedure with retrieved IDs
    Insert_Review(
        p_ProductID  => v_ProductID,
        p_CustomerID => v_CustomerID,
        p_Rating     => 5,
        p_Comment    => 'Excellent smartphone with great features!'
    );

    DBMS_OUTPUT.PUT_LINE('Inserted Review for Smartphone');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Product or Customer not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple Products or Customers found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/


DECLARE
    v_CustomerID Customer.CustomerID%TYPE;
BEGIN
    -- Retrieve CustomerID for Jane Smith
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    -- Call Insert_Cart procedure with retrieved CustomerID
    Insert_Cart(
        p_CustomerID => v_CustomerID
    );

    DBMS_OUTPUT.PUT_LINE('Inserted Cart for Jane Smith');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Customer not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple customers found with the provided email.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/


DECLARE
    v_CustomerID Customer.CustomerID%TYPE;
    v_CartID     Cart.CartID%TYPE;
    v_ProductID  Product.ProductID%TYPE;
BEGIN
    -- Retrieve CustomerID for Jane Smith
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    -- Retrieve CartID for the customer
    SELECT CartID 
    INTO v_CartID 
    FROM Cart 
    WHERE CustomerID = v_CustomerID;

    -- Retrieve ProductID for 'Smartphone'
    SELECT ProductID 
    INTO v_ProductID 
    FROM Product 
    WHERE ProductName = 'Smartphone';

    -- Call Insert_CartItem procedure with retrieved IDs
    Insert_CartItem(
        p_CartID    => v_CartID,
        p_ProductID => v_ProductID,
        p_Quantity  => 1
    );

    DBMS_OUTPUT.PUT_LINE('Inserted CartItem for Smartphone');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Cart or Product not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple Carts or Products found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/

DECLARE
    v_CategoryID Category.CategoryID%TYPE;
BEGIN
    -- Retrieve CategoryID for 'Electronics'
    SELECT CategoryID 
    INTO v_CategoryID 
    FROM Category 
    WHERE CategoryName = 'Electronics';

    -- Call Update_Category procedure with retrieved CategoryID
    Update_Category(
        p_CategoryID   => v_CategoryID,
        p_CategoryName => 'Electronics',
        p_Description  => 'Electronic devices and gadgets'
    );

    DBMS_OUTPUT.PUT_LINE('Updated Category Description for Electronics');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Category not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple categories found with the name Electronics.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/


DECLARE
    v_SupplierID Supplier.SupplierID%TYPE;
BEGIN
    -- Retrieve SupplierID for 'Tech Supplies Inc.'
    SELECT SupplierID 
    INTO v_SupplierID 
    FROM Supplier 
    WHERE SupplierName = 'Tech Supplies Inc.';

    -- Call Update_Supplier procedure with retrieved SupplierID
    Update_Supplier(
        p_SupplierID    => v_SupplierID,
        p_SupplierName  => 'Tech Supplies Inc.',
        p_ContactName   => 'John Doe',
        p_ContactEmail  => 'john.newemail@techsupplies.com', -- Updated email
        p_Phone         => '123-456-7890',
        p_Address       => '123 Tech Street',
        p_City          => 'Techville',
        p_State         => 'TechState',
        p_ZipCode       => '12345'
    );

    DBMS_OUTPUT.PUT_LINE('Updated Supplier Contact Email for Tech Supplies Inc.');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Supplier not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple suppliers found with the name Tech Supplies Inc.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/

DECLARE
    v_CustomerID        Customer.CustomerID%TYPE;
    v_ShippingAddressID Address.AddressID%TYPE;
    v_BillingAddressID  Address.AddressID%TYPE;
BEGIN
    -- Retrieve CustomerID for Jane Smith
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    -- Retrieve Shipping AddressID ('Home')
    SELECT AddressID 
    INTO v_ShippingAddressID 
    FROM Address 
    WHERE CustomerID = v_CustomerID AND AddressType = 'Home';

    -- Retrieve Billing AddressID ('Work')
    SELECT AddressID 
    INTO v_BillingAddressID 
    FROM Address 
    WHERE CustomerID = v_CustomerID AND AddressType = 'Work';

    -- Call Update_Customer procedure with retrieved IDs and other details
    Update_Customer(
        p_CustomerID        => v_CustomerID,
        p_FirstName         => 'Jane',
        p_LastName          => 'Smith',
        p_Email             => 'jane.smith@example.com',
        p_Phone             => '111-222-3333', -- Updated phone
        p_Address           => '456 Main Street',
        p_City              => 'Anytown',
        p_State             => 'Anystate',
        p_ZipCode           => '67890',
        p_ShippingAddressID => v_ShippingAddressID,
        p_BillingAddressID  => v_BillingAddressID
    );

    DBMS_OUTPUT.PUT_LINE('Updated Customer Phone Number for Jane Smith');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Customer or Addresses not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple records found where only one was expected.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/

DECLARE
    v_ProductID  Product.ProductID%TYPE;
    v_CategoryID Category.CategoryID%TYPE;
    v_SupplierID Supplier.SupplierID%TYPE;
BEGIN
    -- Retrieve ProductID for 'Smartphone'
    SELECT ProductID 
    INTO v_ProductID 
    FROM Product 
    WHERE ProductName = 'Smartphone';

    -- Retrieve CategoryID for 'Electronics'
    SELECT CategoryID 
    INTO v_CategoryID 
    FROM Category 
    WHERE CategoryName = 'Electronics';

    -- Retrieve SupplierID for 'Tech Supplies Inc.'
    SELECT SupplierID 
    INTO v_SupplierID 
    FROM Supplier 
    WHERE SupplierName = 'Tech Supplies Inc.';

    -- Call Update_Product procedure with retrieved IDs and updated details
    Update_Product(
        p_ProductID     => v_ProductID,
        p_ProductName   => 'Smartphone',
        p_CategoryID    => v_CategoryID,
        p_SupplierID    => v_SupplierID,
        p_Price         => 549.99, -- Updated price
        p_StockQuantity => 45,      -- Updated stock
        p_Description   => 'Latest model smartphone with advanced features'
    );

    DBMS_OUTPUT.PUT_LINE('Updated Product Price and Stock for Smartphone');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Product, Category, or Supplier not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple records found where only one was expected.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/


DECLARE
    v_CustomerID Customer.CustomerID%TYPE;
    v_OrderID    ORDERS.OrderID%TYPE;
BEGIN
    -- Retrieve CustomerID for Jane Smith
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    -- Retrieve OrderID with Status 'Pending'
    SELECT OrderID 
    INTO v_OrderID 
    FROM ORDERS 
    WHERE CustomerID = v_CustomerID AND Status = 'Pending';

    -- Call Update_Order procedure with retrieved OrderID and updated details
    Update_Order(
        p_OrderID         => v_OrderID,
        p_CustomerID      => v_CustomerID,
        p_ShipDate        => SYSDATE + 5,
        p_ShippingAddress => '789 Shipping Ave, ShipCity, ShipState, 11223',
        p_TotalAmount     => 549.99, -- Updated total amount
        p_Status          => 'Shipped' -- Updated status
    );

    DBMS_OUTPUT.PUT_LINE('Updated Order Status to Shipped');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Order or Customer not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple Orders or Customers found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/


DECLARE
    v_CustomerID  Customer.CustomerID%TYPE;
    v_OrderID     ORDERS.OrderID%TYPE;
    v_ProductID   Product.ProductID%TYPE;
    v_OrderItemID OrderItem.OrderItemID%TYPE;
BEGIN
    -- Retrieve CustomerID for Jane Smith
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    -- Retrieve OrderID with Status 'Shipped'
    SELECT OrderID 
    INTO v_OrderID 
    FROM ORDERS 
    WHERE CustomerID = v_CustomerID AND Status = 'Shipped';

    -- Retrieve ProductID for 'Smartphone'
    SELECT ProductID 
    INTO v_ProductID 
    FROM Product 
    WHERE ProductName = 'Smartphone';

    -- Retrieve OrderItemID for the specific Order and Product
    SELECT OrderItemID 
    INTO v_OrderItemID 
    FROM OrderItem 
    WHERE OrderID = v_OrderID AND ProductID = v_ProductID;

    -- Call Update_OrderItem procedure with retrieved IDs and updated details
    Update_OrderItem(
        p_OrderItemID => v_OrderItemID,
        p_OrderID     => v_OrderID,
        p_ProductID   => v_ProductID,
        p_Quantity    => 2, -- Updated quantity
        p_UnitPrice   => 549.99
    );

    DBMS_OUTPUT.PUT_LINE('Updated OrderItem Quantity for Smartphone');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('OrderItem, Order, or Product not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple OrderItems, Orders, or Products found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/


DECLARE
    v_CustomerID Customer.CustomerID%TYPE;
    v_OrderID    ORDERS.OrderID%TYPE;
    v_PaymentID  Payment.PaymentID%TYPE;
BEGIN
    -- Retrieve CustomerID for Jane Smith
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    -- Retrieve OrderID with Status 'Shipped'
    SELECT OrderID 
    INTO v_OrderID 
    FROM ORDERS 
    WHERE CustomerID = v_CustomerID AND Status = 'Shipped';

    -- Retrieve PaymentID for the specific Order
    SELECT PaymentID 
    INTO v_PaymentID 
    FROM Payment 
    WHERE OrderID = v_OrderID;

    -- Call Update_Payment procedure with retrieved IDs and updated details
    Update_Payment(
        p_PaymentID     => v_PaymentID,
        p_OrderID       => v_OrderID,
        p_PaymentDate   => SYSDATE,
        p_PaymentMethod => 'Credit Card',
        p_Amount         => 1099.98 -- Updated amount
    );

    DBMS_OUTPUT.PUT_LINE('Updated Payment Amount for Order');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Payment or Order not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple Payments or Orders found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/


DECLARE
    v_CustomerID Customer.CustomerID%TYPE;
    v_OrderID    ORDERS.OrderID%TYPE;
    v_ShippingID Shipping.ShippingID%TYPE;
BEGIN
    -- Retrieve CustomerID for Jane Smith
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    -- Retrieve OrderID with Status 'Shipped'
    SELECT OrderID 
    INTO v_OrderID 
    FROM ORDERS 
    WHERE CustomerID = v_CustomerID AND Status = 'Shipped';

    -- Retrieve ShippingID for the specific Order
    SELECT ShippingID 
    INTO v_ShippingID 
    FROM Shipping 
    WHERE OrderID = v_OrderID;

    -- Call Update_Shipping procedure with retrieved IDs and updated details
    Update_Shipping(
        p_ShippingID     => v_ShippingID,
        p_OrderID        => v_OrderID,
        p_Carrier        => 'FastShip',
        p_TrackingNumber => 'FS987654321', -- Updated tracking number
        p_ShippedDate    => SYSDATE,        -- Updated shipped date
        p_DeliveredDate  => NULL,            -- To be updated upon delivery
        p_ShippingCost    => 15.00
    );

    DBMS_OUTPUT.PUT_LINE('Updated Shipping Details for Order');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Shipping or Order not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple Shippings or Orders found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/

DECLARE
    v_ProductID  Product.ProductID%TYPE;
    v_CustomerID Customer.CustomerID%TYPE;
    v_ReviewID   Review.ReviewID%TYPE;
BEGIN
    -- Retrieve ProductID for 'Smartphone'
    SELECT ProductID 
    INTO v_ProductID 
    FROM Product 
    WHERE ProductName = 'Smartphone';

    -- Retrieve CustomerID for Jane Smith
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    -- Retrieve ReviewID for the specific Product and Customer
    SELECT ReviewID 
    INTO v_ReviewID 
    FROM Review 
    WHERE ProductID = v_ProductID AND CustomerID = v_CustomerID;

    -- Call Update_Review procedure with retrieved IDs and updated details
    Update_Review(
        p_ReviewID   => v_ReviewID,
        p_ProductID  => v_ProductID,
        p_CustomerID => v_CustomerID,
        p_Rating     => 4, -- Updated rating
        p_Comment    => 'Great smartphone, but battery life could be better.' -- Updated comment
    );

    DBMS_OUTPUT.PUT_LINE('Updated Review for Smartphone');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Review, Product, or Customer not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple Reviews, Products, or Customers found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/

DECLARE
    v_CustomerID Customer.CustomerID%TYPE;
    v_CartID     Cart.CartID%TYPE;
    v_ProductID  Product.ProductID%TYPE;
    v_CartItemID CartItem.CartItemID%TYPE;
BEGIN
    -- Retrieve CustomerID for Jane Smith
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    -- Retrieve CartID for the customer
    SELECT CartID 
    INTO v_CartID 
    FROM Cart 
    WHERE CustomerID = v_CustomerID;

    -- Retrieve ProductID for 'Smartphone'
    SELECT ProductID 
    INTO v_ProductID 
    FROM Product 
    WHERE ProductName = 'Smartphone';

    -- Retrieve CartItemID for the specific Cart and Product
    SELECT CartItemID 
    INTO v_CartItemID 
    FROM CartItem 
    WHERE CartID = v_CartID AND ProductID = v_ProductID;

    -- Call Update_CartItem procedure with retrieved IDs and updated quantity
    Update_CartItem(
        p_CartItemID => v_CartItemID,
        p_CartID     => v_CartID,
        p_ProductID  => v_ProductID,
        p_Quantity   => 3 -- Updated quantity
    );

    DBMS_OUTPUT.PUT_LINE('Updated CartItem Quantity for Smartphone');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('CartItem, Cart, or Product not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple CartItems, Carts, or Products found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/

-- =================================================================================================================================================================================================

SET SERVEROUTPUT ON;

DECLARE
    rc SYS_REFCURSOR;
    v_CategoryID Category.CategoryID%TYPE;
    v_CategoryName Category.CategoryName%TYPE;
    v_Description Category.Description%TYPE;
    v_SelectedCategoryID Category.CategoryID%TYPE;
BEGIN
    -- Get the CategoryID for 'Electronics'
    SELECT CategoryID INTO v_SelectedCategoryID FROM CATEGORY WHERE CategoryName = 'Electronics';

    -- Call the procedure Get_Category with the selected CategoryID
    Get_Category(
        p_CategoryID => v_SelectedCategoryID,
        o_Category   => rc
    );
    
    -- Fetch and display the results
    LOOP
        FETCH rc INTO v_CategoryID, v_CategoryName, v_Description;
        EXIT WHEN rc%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Category ID: ' || v_CategoryID);
        DBMS_OUTPUT.PUT_LINE('Category Name: ' || v_CategoryName);
        DBMS_OUTPUT.PUT_LINE('Description: ' || v_Description);
    END LOOP;
    
    -- Close the cursor
    CLOSE rc;
END;
/

DECLARE
    rc SYS_REFCURSOR;
    v_SupplierID Supplier.SupplierID%TYPE;
    v_SupplierName Supplier.SupplierName%TYPE;
    v_ContactName Supplier.ContactName%TYPE;
    v_ContactEmail Supplier.ContactEmail%TYPE;
    v_Phone Supplier.Phone%TYPE;
    v_Address Supplier.Address%TYPE;
    v_City Supplier.City%TYPE;
    v_State Supplier.State%TYPE;
    v_ZipCode Supplier.ZipCode%TYPE;
    v_InputSupplierID Supplier.SupplierID%TYPE; -- Variable to hold the SupplierID
BEGIN
    -- First, select the SupplierID into a variable
    SELECT SupplierID 
    INTO v_InputSupplierID
    FROM Supplier 
    WHERE SupplierName = 'Tech Supplies Inc.';

    -- Open the cursor with the result of Get_Supplier procedure
    Get_Supplier(
        p_SupplierID => v_InputSupplierID, -- Pass the variable here
        o_Supplier   => rc
    );

    LOOP
        FETCH rc INTO 
            v_SupplierID, 
            v_SupplierName, 
            v_ContactName, 
            v_ContactEmail, 
            v_Phone, 
            v_Address, 
            v_City, 
            v_State, 
            v_ZipCode;

        EXIT WHEN rc%NOTFOUND;

        -- Displaying the output
        DBMS_OUTPUT.PUT_LINE('Supplier ID: ' || v_SupplierID);
        DBMS_OUTPUT.PUT_LINE('Supplier Name: ' || v_SupplierName);
        DBMS_OUTPUT.PUT_LINE('Contact Name: ' || v_ContactName);
        DBMS_OUTPUT.PUT_LINE('Contact Email: ' || v_ContactEmail);
        DBMS_OUTPUT.PUT_LINE('Phone: ' || v_Phone);
        DBMS_OUTPUT.PUT_LINE('Address: ' || v_Address);
        DBMS_OUTPUT.PUT_LINE('City: ' || v_City);
        DBMS_OUTPUT.PUT_LINE('State: ' || v_State);
        DBMS_OUTPUT.PUT_LINE('Zip Code: ' || v_ZipCode);
    END LOOP;

    -- Close the cursor
    CLOSE rc;
END;
/

DECLARE
    rc SYS_REFCURSOR;
    v_CustomerID Customer.CustomerID%TYPE;
    v_FirstName Customer.FirstName%TYPE;
    v_LastName Customer.LastName%TYPE;
    v_Email Customer.Email%TYPE;
    v_Phone Customer.Phone%TYPE;
    v_Address Customer.Address%TYPE;
    v_City Customer.City%TYPE;
    v_State Customer.State%TYPE;
    v_ZipCode Customer.ZipCode%TYPE;
    v_RegistrationDate Customer.RegistrationDate%TYPE;
    v_ShippingAddressID Customer.ShippingAddressID%TYPE;
    v_BillingAddressID Customer.BillingAddressID%TYPE;
    v_InputCustomerID Customer.CustomerID%TYPE; -- Variable to hold the CustomerID
BEGIN
    -- First, select the CustomerID into a variable
    SELECT CustomerID 
    INTO v_InputCustomerID
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    -- Fetch customer details using the CustomerID
    Get_Customer(
        p_CustomerID => v_InputCustomerID, -- Pass the variable here
        o_Customer   => rc
    );

    LOOP
        FETCH rc INTO 
            v_CustomerID, 
            v_FirstName, 
            v_LastName, 
            v_Email, 
            v_Phone, 
            v_Address, 
            v_City, 
            v_State, 
            v_ZipCode, 
            v_RegistrationDate, 
            v_ShippingAddressID, 
            v_BillingAddressID;
        
        EXIT WHEN rc%NOTFOUND;

        -- Display customer information
        DBMS_OUTPUT.PUT_LINE('Customer ID: ' || v_CustomerID);
        DBMS_OUTPUT.PUT_LINE('First Name: ' || v_FirstName);
        DBMS_OUTPUT.PUT_LINE('Last Name: ' || v_LastName);
        DBMS_OUTPUT.PUT_LINE('Email: ' || v_Email);
        DBMS_OUTPUT.PUT_LINE('Phone: ' || v_Phone);
        DBMS_OUTPUT.PUT_LINE('Address: ' || v_Address);
        DBMS_OUTPUT.PUT_LINE('City: ' || v_City);
        DBMS_OUTPUT.PUT_LINE('State: ' || v_State);
        DBMS_OUTPUT.PUT_LINE('Zip Code: ' || v_ZipCode);
        DBMS_OUTPUT.PUT_LINE('Registration Date: ' || TO_CHAR(v_RegistrationDate, 'YYYY-MM-DD'));
        DBMS_OUTPUT.PUT_LINE('Shipping Address ID: ' || v_ShippingAddressID);
        DBMS_OUTPUT.PUT_LINE('Billing Address ID: ' || v_BillingAddressID);
    END LOOP;

    -- Close the cursor
    CLOSE rc;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No customer found with the specified email.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        IF rc%ISOPEN THEN
            CLOSE rc;
        END IF;
END;
/


DECLARE
    rc SYS_REFCURSOR;
    v_ProductID Product.ProductID%TYPE;
    v_ProductName Product.ProductName%TYPE;
    v_CategoryID Product.CategoryID%TYPE;
    v_SupplierID Product.SupplierID%TYPE;
    v_Price Product.Price%TYPE;
    v_StockQuantity Product.StockQuantity%TYPE;
    v_Description Product.Description%TYPE;
    v_InputProductID Product.ProductID%TYPE; -- Variable to hold the ProductID
BEGIN
    -- First, select the ProductID into a variable
    SELECT ProductID 
    INTO v_InputProductID
    FROM Product 
    WHERE ProductName = 'Smartphone';

    -- Fetch product details using the ProductID
    Get_Product(
        p_ProductID => v_InputProductID, -- Pass the variable here
        o_Product   => rc
    );

    LOOP
        FETCH rc INTO 
            v_ProductID, 
            v_ProductName, 
            v_CategoryID, 
            v_SupplierID, 
            v_Price, 
            v_StockQuantity, 
            v_Description;
        
        EXIT WHEN rc%NOTFOUND;

        -- Display product details
        DBMS_OUTPUT.PUT_LINE('Product ID: ' || v_ProductID);
        DBMS_OUTPUT.PUT_LINE('Product Name: ' || v_ProductName);
        DBMS_OUTPUT.PUT_LINE('Category ID: ' || v_CategoryID);
        DBMS_OUTPUT.PUT_LINE('Supplier ID: ' || v_SupplierID);
        DBMS_OUTPUT.PUT_LINE('Price: ' || v_Price);
        DBMS_OUTPUT.PUT_LINE('Stock Quantity: ' || v_StockQuantity);
        DBMS_OUTPUT.PUT_LINE('Description: ' || v_Description);
    END LOOP;

    -- Close the cursor
    CLOSE rc;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No product found with the specified name.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        IF rc%ISOPEN THEN
            CLOSE rc;
        END IF;
END;
/



--REPORTS ==============================================================

-- ===================== Examples 
                SELECT 
                    c.FirstName || ' ' || c.LastName AS CustomerName,
                    COUNT(o.OrderID) AS TotalOrders,
                    SUM(o.TotalAmount) AS TotalOrderValue
                FROM 
                    Customer c
                JOIN 
                    Orders o ON c.CustomerID = o.CustomerID
                GROUP BY 
                    c.FirstName, c.LastName
                ORDER BY 
                    TotalOrders DESC;

                -- 
                SELECT 
                    s.SupplierName,
                    COUNT(p.ProductID) AS NumberOfProductsSupplied,
                    SUM(p.Price * p.StockQuantity) AS TotalValueSupplied
                FROM 
                    Supplier s
                JOIN 
                    Product p ON s.SupplierID = p.SupplierID
                GROUP BY 
                    s.SupplierName
                ORDER BY 
                    TotalValueSupplied DESC;

                ----

                SELECT 
                    OrderID,
                    CustomerID,
                    OrderDate,
                    Status
                FROM 
                    Orders
                ORDER BY 
                    OrderDate DESC;



-- ================================= DB - Temp 


CREATE OR REPLACE PROCEDURE report_sales_by_category AS
    CURSOR c_sales IS
        SELECT c.CategoryName, SUM(oi.TotalPrice) AS TotalSales
        FROM OrderItem oi
        JOIN Product p ON oi.ProductID = p.ProductID
        JOIN Category c ON p.CategoryID = c.CategoryID
        JOIN ORDERS o ON oi.OrderID = o.OrderID
        WHERE o.Status = 'Delivered'
        GROUP BY c.CategoryName
        ORDER BY TotalSales DESC;
    rec_sales c_sales%ROWTYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Sales by Category:');
    OPEN c_sales;
    LOOP
        FETCH c_sales INTO rec_sales;
        EXIT WHEN c_sales%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Category: ' || rec_sales.CategoryName || ' - Total Sales: $' || rec_sales.TotalSales);
    END LOOP;
    CLOSE c_sales;
END report_sales_by_category;
/

SET SERVEROUTPUT ON;
EXEC report_sales_by_category;

--- report_top_customers
CREATE OR REPLACE PROCEDURE report_top_customers AS
    CURSOR c_top_customers IS
        SELECT c.FirstName || ' ' || c.LastName AS CustomerName, SUM(o.TotalAmount) AS TotalPurchases
        FROM Customer c
        JOIN ORDERS o ON c.CustomerID = o.CustomerID
        WHERE o.Status = 'Delivered'
        GROUP BY c.FirstName, c.LastName
        HAVING SUM(o.TotalAmount) > 0
        ORDER BY TotalPurchases DESC
        FETCH FIRST 10 ROWS ONLY;
    rec_customer c_top_customers%ROWTYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Top 10 Customers by Purchase Amount:');
    OPEN c_top_customers;
    LOOP
        FETCH c_top_customers INTO rec_customer;
        EXIT WHEN c_top_customers%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Customer: ' || rec_customer.CustomerName || ' - Total Purchases: $' || rec_customer.TotalPurchases);
    END LOOP;
    CLOSE c_top_customers;
END report_top_customers;
/

SET SERVEROUTPUT ON;
EXEC report_top_customers;

--- report_low_inventory

CREATE OR REPLACE PROCEDURE report_low_inventory(p_threshold IN NUMBER) AS
    CURSOR c_low_inventory IS
        SELECT p.ProductName, p.StockQuantity
        FROM Product p
        WHERE p.StockQuantity < p_threshold
        ORDER BY p.StockQuantity ASC;
    rec_product c_low_inventory%ROWTYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Inventory Status Report (Stock below ' || p_threshold || '):');
    OPEN c_low_inventory;
    LOOP
        FETCH c_low_inventory INTO rec_product;
        EXIT WHEN c_low_inventory%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Product: ' || rec_product.ProductName || ' - Stock Quantity: ' || rec_product.StockQuantity);
    END LOOP;
    CLOSE c_low_inventory;
END report_low_inventory;
/

SET SERVEROUTPUT ON;
EXEC report_low_inventory(50);

-- report_monthly_sales

CREATE OR REPLACE PROCEDURE report_monthly_sales(p_year IN NUMBER, p_month IN NUMBER, p_target IN NUMBER) AS
    v_total_sales NUMBER;
BEGIN
    SELECT SUM(o.TotalAmount)
    INTO v_total_sales
    FROM ORDERS o
    WHERE EXTRACT(YEAR FROM o.OrderDate) = p_year
      AND EXTRACT(MONTH FROM o.OrderDate) = p_month
      AND o.Status = 'Delivered';
    
    DBMS_OUTPUT.PUT_LINE('Total Sales for ' || TO_CHAR(TO_DATE(p_month, 'MM'), 'Month') || ' ' || p_year || ': $' || NVL(v_total_sales, 0));
    
    IF NVL(v_total_sales, 0) >= p_target THEN
        DBMS_OUTPUT.PUT_LINE('Sales target met.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Sales target not met.');
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No sales data found for the specified month.');
END report_monthly_sales;
/

SET SERVEROUTPUT ON;
EXEC report_monthly_sales(2024, 10, 100);

-- report_product_sales_trend

CREATE OR REPLACE PROCEDURE report_product_sales_trend(p_product_id IN NUMBER) AS
    TYPE sales_array IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
    v_sales sales_array;
BEGIN
    -- Populate sales per month
    FOR i IN 1..12 LOOP
        SELECT NVL(SUM(oi.TotalPrice), 0)
        INTO v_sales(i)
        FROM OrderItem oi
        JOIN ORDERS o ON oi.OrderID = o.OrderID
        WHERE oi.ProductID = p_product_id
          AND EXTRACT(MONTH FROM o.OrderDate) = i
          AND o.Status = 'Delivered';
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('Sales Trend for Product ID ' || p_product_id || ':');
    
    FOR i IN 1..12 LOOP
        DBMS_OUTPUT.PUT_LINE('Month ' || i || ': $' || v_sales(i) || ' ' ||
            CASE
                WHEN v_sales(i) > 10000 THEN 'High'
                WHEN v_sales(i) BETWEEN 5000 AND 10000 THEN 'Medium'
                ELSE 'Low'
            END);
    END LOOP;
END report_product_sales_trend;
/

SET SERVEROUTPUT ON;
EXEC report_product_sales_trend(1);



-- =======================================  Think Different 🍎🍏🍏🍏🍏🍎🍎

DECLARE
    v_CustomerID Customer.CustomerID%TYPE;
    v_OrderID    ORDERS.OrderID%TYPE;
BEGIN
    -- Retrieve CustomerID for Jane Smith
    SELECT CustomerID 
    INTO v_CustomerID 
    FROM Customer 
    WHERE Email = 'jane.smith@example.com';

    -- Retrieve OrderID with Status 'Pending'
    SELECT OrderID 
    INTO v_OrderID 
    FROM ORDERS 
    WHERE OrderID = 2 AND Status = 'Pending';

    -- Call Update_Order procedure with retrieved OrderID and updated details
    Update_Order(
        p_OrderID         => v_OrderID,
        p_CustomerID      => v_CustomerID,
        p_ShipDate        => SYSDATE + 5,
        p_ShippingAddress => '789 Shipping Ave, ShipCity, ShipState, 11223',
        p_TotalAmount     => 549.99, -- Updated total amount
        p_Status          => 'Delivered' -- Updated status Delivered
    );

    DBMS_OUTPUT.PUT_LINE('Updated Order Status to Shipped');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Order or Customer not found.');
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple Orders or Customers found.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/
