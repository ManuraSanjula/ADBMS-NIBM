CREATE TABLE Users (
    UserID NUMBER PRIMARY KEY,
    UserName VARCHAR2(100) UNIQUE NOT NULL,
    Password VARCHAR2(100) NOT NULL,
    NIC VARCHAR2(20) UNIQUE,
    Type VARCHAR2(20) CHECK (Type IN ('Admin', 'Manager', 'Driver', 'Customer','Supplier'))
);

CREATE TABLE Admin (
    AdminID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(100),
    LastName VARCHAR2(100),
    UserID NUMBER UNIQUE,
    Email VARCHAR2(100) CHECK (Email LIKE '%@%.%'),
    Phone VARCHAR2(20),
    Address VARCHAR2(200),
    City VARCHAR2(100),
    State VARCHAR2(100),
    ZipCode VARCHAR2(10),
    CONSTRAINT fk_admin_user FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

CREATE TABLE Manager (
    ManagerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(100),
    LastName VARCHAR2(100),
    UserID NUMBER UNIQUE,
    Email VARCHAR2(100) CHECK (Email LIKE '%@%.%'),
    Phone VARCHAR2(20),
    Address VARCHAR2(200),
    City VARCHAR2(100),
    State VARCHAR2(100),
    ZipCode VARCHAR2(10),
    CONSTRAINT fk_manager_user FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

CREATE TABLE Driver (
    DriverID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(100),
    LastName VARCHAR2(100),
    UserID NUMBER UNIQUE,
    LicenseNumber VARCHAR2(50),
    Email VARCHAR2(100) CHECK (Email LIKE '%@%.%'),
    Phone VARCHAR2(20),
    Address VARCHAR2(200),
    City VARCHAR2(100),
    State VARCHAR2(100),
    ZipCode VARCHAR2(10),
    CONSTRAINT fk_driver_user FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

CREATE TABLE Customer (
    CustomerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName VARCHAR2(50) NOT NULL,
    LastName VARCHAR2(50) NOT NULL,
    Email VARCHAR2(100) UNIQUE NOT NULL,
    Phone VARCHAR2(20),
    RegistrationDate DATE DEFAULT SYSDATE,
    UserID NUMBER UNIQUE,
    ShippingAddressID NUMBER UNIQUE,  
    BillingAddressID NUMBER UNIQUE, 
    CONSTRAINT fk_customer_user FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

-- CREATE TABLE Supplier (
--     SupplierID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--     FirstName VARCHAR2(100) NOT NULL,
--     LastName VARCHAR2(100),
--     Email VARCHAR2(100) CHECK (Email LIKE '%@%.%'),
--     Phone VARCHAR2(20),
--     Address VARCHAR2(200),
--     City VARCHAR2(100),
--     State VARCHAR2(100),
--     ZipCode VARCHAR2(10),
--     UserID NUMBER UNIQUE,
--     CONSTRAINT fk_supplier_user FOREIGN KEY (UserID) REFERENCES Users(UserID)
-- );

CREATE TABLE Supplier (
    SupplierID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    SupplierName VARCHAR2(100) NOT NULL,
    ContactName VARCHAR2(100),
    Email VARCHAR2(100) CHECK (Email LIKE '%@%.%'),
    Phone VARCHAR2(20),
    Address VARCHAR2(200),
    City VARCHAR2(100),
    State VARCHAR2(100),
    ZipCode VARCHAR2(10),
    UserID NUMBER UNIQUE,
    CONSTRAINT fk_supplier_user FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

CREATE TABLE Category (
    CategoryID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CategoryName VARCHAR2(100) NOT NULL,
    Description VARCHAR2(500)
);


CREATE TABLE Product (
    ProductID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ProductName VARCHAR2(100) NOT NULL,
    CategoryID NUMBER NOT NULL,
    SupplierID NUMBER NOT NULL,
    Price NUMBER(10,2) NOT NULL CHECK (Price > 0),
    StockQuantity NUMBER NOT NULL CHECK (StockQuantity >= 0),
    Description VARCHAR2(1000),
    CONSTRAINT fk_product_category
        FOREIGN KEY (CategoryID) REFERENCES Category(CategoryID),
    CONSTRAINT fk_product_supplier
        FOREIGN KEY (SupplierID) REFERENCES Supplier(SupplierID)
);


--CREATE TABLE Customer (
--    CustomerID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--    FirstName VARCHAR2(50) NOT NULL,
--    LastName VARCHAR2(50) NOT NULL,
--    Email VARCHAR2(100) UNIQUE NOT NULL,
--    Phone VARCHAR2(20),
--    Address VARCHAR2(200),
--    City VARCHAR2(100),
--    State VARCHAR2(100),
--    ZipCode VARCHAR2(10),
--    RegistrationDate DATE DEFAULT SYSDATE,
--    UserID NUMBER UNIQUE,
--    ShippingAddressID NUMBER UNIQUE,
--    BillingAddressID NUMBER UNIQUE,
--    CONSTRAINT fk_customer_user FOREIGN KEY (UserID) REFERENCES Users(UserID),
--    CONSTRAINT fk_customer_shipping_address FOREIGN KEY (ShippingAddressID) REFERENCES Address(AddressID),
--    CONSTRAINT fk_customer_billing_address FOREIGN KEY (BillingAddressID) REFERENCES Address(AddressID)
--);



CREATE TABLE Address (
    AddressID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID NUMBER NOT NULL,
    Street VARCHAR2(200) NOT NULL,
    City VARCHAR2(100) NOT NULL,
    State VARCHAR2(100) NOT NULL,
    ZipCode VARCHAR2(10) NOT NULL,
    AddressType VARCHAR2(50) CHECK (AddressType IN ('ShippingAddress', 'BillingAddress')),
    CONSTRAINT fk_address_customer FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID)
);

ALTER TABLE Customer
    ADD (
        CONSTRAINT fk_customer_shipping_address
            FOREIGN KEY (ShippingAddressID)
            REFERENCES Address(AddressID),
        
        CONSTRAINT fk_customer_billing_address
            FOREIGN KEY (BillingAddressID)
            REFERENCES Address(AddressID)
    );


CREATE TABLE Orders (
    OrderID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID NUMBER NOT NULL,
    OrderDate DATE DEFAULT SYSDATE,
    ShipDate DATE,
    ShippingAddress VARCHAR2(200),
    TotalAmount NUMBER(10,2) CHECK (TotalAmount >= 0),
    Status VARCHAR2(50) NOT NULL CHECK (Status IN ('Pending', 'Shipped', 'Delivered', 'Cancelled')),
    CONSTRAINT fk_orders_customer FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID)
);

CREATE TABLE OrderItem (
    OrderItemID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    OrderID NUMBER NOT NULL,
    ProductID NUMBER NOT NULL,
    Quantity NUMBER NOT NULL CHECK (Quantity > 0),
    UnitPrice NUMBER(10,2) NOT NULL CHECK (UnitPrice > 0),
    TotalPrice NUMBER GENERATED ALWAYS AS (Quantity * UnitPrice) VIRTUAL,
    CONSTRAINT fk_orderitem_order FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    CONSTRAINT fk_orderitem_product FOREIGN KEY (ProductID) REFERENCES Product(ProductID)
);

CREATE TABLE Payment (
    PaymentID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    OrderID NUMBER NOT NULL,
    PaymentDate DATE DEFAULT SYSDATE,
    PaymentMethod VARCHAR2(50) NOT NULL CHECK (PaymentMethod IN ('Credit Card', 'Debit Card', 'PayPal', 'Bank Transfer')),
    Amount NUMBER(10,2) NOT NULL CHECK (Amount >= 0),
    CONSTRAINT fk_payment_order FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

CREATE TABLE Shipping (
    ShippingID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    OrderID NUMBER NOT NULL,
    Carrier VARCHAR2(100),
    TrackingNumber VARCHAR2(50),
    ShippedDate DATE,
    DeliveredDate DATE,
    ShippingCost NUMBER(10, 2),
    CONSTRAINT fk_shipping_order FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

CREATE TABLE Review (
    ReviewID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ProductID NUMBER NOT NULL,
    CustomerID NUMBER NOT NULL,
    Rating NUMBER CHECK (Rating BETWEEN 1 AND 5),
    ReviewText VARCHAR2(1000),
    ReviewDate DATE DEFAULT SYSDATE,
    CONSTRAINT fk_review_product FOREIGN KEY (ProductID) REFERENCES Product(ProductID),
    CONSTRAINT fk_review_customer FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID)
);

CREATE TABLE Cart (
    CartID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CustomerID NUMBER NOT NULL,
    CONSTRAINT fk_cart_customer FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID)
);

CREATE TABLE CartItem (
    CartItemID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CartID NUMBER NOT NULL,
    ProductID NUMBER NOT NULL,
    Quantity NUMBER NOT NULL,
    CONSTRAINT fk_cartitem_cart FOREIGN KEY (CartID) REFERENCES Cart(CartID),
    CONSTRAINT fk_cartitem_product FOREIGN KEY (ProductID) REFERENCES Product(ProductID)
);
